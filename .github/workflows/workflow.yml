name: Go test build deploy

on: [push]

env:
  GO_VERSION: 1.21.4
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: ec_backend
  ECS_SERVICE: ec-backend-service
  ECS_CLUSTER: ec_backend
  ECS_TASK_DEFINITION: docker/task-definition.json
  CONTAINER_NAME: ec_backend

jobs:
  lint-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.35-debian
        env:
          MYSQL_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: 'ec_db_test'
        ports:
          - 3306:3306
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: go mod tidy
      - name: Go Lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2
      - name: Set env
        run: export ENV=citest && export WD=$(pwd)
      - name: Setup DB
        run: mysql -u root --protocol tcp < .github/workflows/setup.sql
      - name: DB migrate
        run: go run cmd/bun/main.go init && go run cmd/bun/main.go migrate
      - name: Go Test
        run: go test ./...

  build-deploy:
    needs: lint-test
    runs-on: ubuntu-latest
    # github.ref = マージされる側のブランチ名またはコミットされるブランチ名
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: go mod tidy
      - name: Go Build
        run: go build -o main enduser/api/main.go

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECRのarn
          IMAGE_TAG: ${{ github.sha }} # コミットのハッシュ値
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
